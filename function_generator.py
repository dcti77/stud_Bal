# Подвиг 1. Вводится натуральное число N. Необходимо определить функцию-генератор с именем get_sum, которая бы возвращала текущую сумму чисел последовательности длины N в диапазоне целых чисел [1; N]. Например:
#
# - для первого числа 1 сумма равна 1;
# - для второго числа 2 сумма равна 1+2 = 3
# ....
# - для N-го числа сумма равна 1+2+...+(N-1)+N
#
# Реализовать функцию-генератор get_sum без использования коллекций. Вызывать ее не нужно, только определить.
#
#
# N = int(input())
#
#
# def get_sum(n):
#     sum = 0
#     for x in range(1, n + 1):
#         sum = sum + x
#         yield sum


# Подвиг 2. Мы с вами в заданиях несколько раз генерировали последовательность чисел Фибоначчи, которая строится по правилу: каждое последующее число равно сумме двух предыдущих. Для разнообразия давайте будем генерировать каждое последующее как сумму трех предыдущих чисел. При этом первые три числа равны 1 и имеем такую последовательность:
#
# 1, 1, 1, 3, 5, 9, 17, 31, 57, ...
#
# Не знаю, есть ли у нее название, поэтому, в рамках уроков, я скромно назову ее последовательностью Балакирева.
#
# Итак, на вход программы поступает натуральное число N (N > 5) и необходимо определить функцию-генератор, которая бы возвращала N первых чисел последовательности Балакирева (включая первые три единицы).
#
# Реализуйте эту функцию без использования коллекций (списков, кортежей, словарей и т.п.). Вызовите ее N раз для получения N чисел и выведите полученные числа на экран в одну строчку через пробел.

def bal_func(n):
    pass
